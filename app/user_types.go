// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "Algorithms": Application User Types
//
// Command:
// $ goagen
// --design=github.com/schiob/dijkstra/design
// --out=$(GOPATH)/src/github.com/schiob/dijkstra
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
)

// graphPayload user type.
type graphPayload struct {
	// True if directed graph
	Directed *bool `form:"directed,omitempty" json:"directed,omitempty" xml:"directed,omitempty"`
	// number of edges
	EdgeNum *int `form:"edge_num,omitempty" json:"edge_num,omitempty" xml:"edge_num,omitempty"`
	// Edges of the graph
	Edges []*edge `form:"edges,omitempty" json:"edges,omitempty" xml:"edges,omitempty"`
	// number of nodes
	NodeNum *int `form:"node_num,omitempty" json:"node_num,omitempty" xml:"node_num,omitempty"`
	// Id of starting node
	Start *int `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
}

// Validate validates the graphPayload type instance.
func (ut *graphPayload) Validate() (err error) {
	if ut.Start == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "start"))
	}
	if ut.Directed == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "directed"))
	}
	if ut.NodeNum == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "node_num"))
	}
	if ut.EdgeNum == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "edge_num"))
	}
	if ut.Edges == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "edges"))
	}
	for _, e := range ut.Edges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates GraphPayload from graphPayload
func (ut *graphPayload) Publicize() *GraphPayload {
	var pub GraphPayload
	if ut.Directed != nil {
		pub.Directed = *ut.Directed
	}
	if ut.EdgeNum != nil {
		pub.EdgeNum = *ut.EdgeNum
	}
	if ut.Edges != nil {
		pub.Edges = make([]*Edge, len(ut.Edges))
		for i2, elem2 := range ut.Edges {
			pub.Edges[i2] = elem2.Publicize()
		}
	}
	if ut.NodeNum != nil {
		pub.NodeNum = *ut.NodeNum
	}
	if ut.Start != nil {
		pub.Start = *ut.Start
	}
	return &pub
}

// GraphPayload user type.
type GraphPayload struct {
	// True if directed graph
	Directed bool `form:"directed" json:"directed" xml:"directed"`
	// number of edges
	EdgeNum int `form:"edge_num" json:"edge_num" xml:"edge_num"`
	// Edges of the graph
	Edges []*Edge `form:"edges" json:"edges" xml:"edges"`
	// number of nodes
	NodeNum int `form:"node_num" json:"node_num" xml:"node_num"`
	// Id of starting node
	Start int `form:"start" json:"start" xml:"start"`
}

// Validate validates the GraphPayload type instance.
func (ut *GraphPayload) Validate() (err error) {

	if ut.Edges == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "edges"))
	}
	for _, e := range ut.Edges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// edge user type.
type edge struct {
	// Id of destination node
	Destination *int `form:"destination,omitempty" json:"destination,omitempty" xml:"destination,omitempty"`
	// Id of origin node
	Origin *int `form:"origin,omitempty" json:"origin,omitempty" xml:"origin,omitempty"`
	// Weight of the edge
	Weight *int `form:"weight,omitempty" json:"weight,omitempty" xml:"weight,omitempty"`
}

// Validate validates the edge type instance.
func (ut *edge) Validate() (err error) {
	if ut.Origin == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "origin"))
	}
	if ut.Destination == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "destination"))
	}
	if ut.Weight == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "weight"))
	}
	return
}

// Publicize creates Edge from edge
func (ut *edge) Publicize() *Edge {
	var pub Edge
	if ut.Destination != nil {
		pub.Destination = *ut.Destination
	}
	if ut.Origin != nil {
		pub.Origin = *ut.Origin
	}
	if ut.Weight != nil {
		pub.Weight = *ut.Weight
	}
	return &pub
}

// Edge user type.
type Edge struct {
	// Id of destination node
	Destination int `form:"destination" json:"destination" xml:"destination"`
	// Id of origin node
	Origin int `form:"origin" json:"origin" xml:"origin"`
	// Weight of the edge
	Weight int `form:"weight" json:"weight" xml:"weight"`
}

// Validate validates the Edge type instance.
func (ut *Edge) Validate() (err error) {

	return
}
